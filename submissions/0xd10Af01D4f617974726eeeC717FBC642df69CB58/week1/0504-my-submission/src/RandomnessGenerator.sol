// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import {CadenceRandomConsumer} from "@onflow/flow-sol-utils/src/random/CadenceRandomConsumer.sol";

/**
 * @title RandomnessGenerator
 * @dev A contract that uses Flow's VRF beacon for secure randomness generation
 */
contract RandomnessGenerator is CadenceRandomConsumer {
    // Events
    event RandomNumberGenerated(uint64 value, address requestor);
    event RandomRangeGenerated(uint64 value, uint64 min, uint64 max, address requestor);
    
    // Mapping to store generated values for each address
    mapping(address => uint64[]) public generatedValues;
    
    // Error definitions
    error InvalidRange();
    
    /**
     * @dev Generate a random number within a specific range
     * @param min The minimum value (inclusive)
     * @param max The maximum value (inclusive)
     * @return A random number within the specified range
     */
    function getRandomNumber(uint64 min, uint64 max) public returns (uint64) {
        if (min > max) {
            revert InvalidRange();
        }
        
        uint64 randomValue = _getRevertibleRandomInRange(min, max);
        generatedValues[msg.sender].push(randomValue);
        
        emit RandomNumberGenerated(randomValue, msg.sender);
        emit RandomRangeGenerated(randomValue, min, max, msg.sender);
        
        return randomValue;
    }
    
    /**
     * @dev Get a random number up to a maximum value (0 to max-1)
     * @param max The maximum value (exclusive)
     * @return A random number between 0 and max-1
     */
    function getRandomNumberUpTo(uint64 max) public returns (uint64) {
        return getRandomNumber(0, max - 1);
    }
    
    /**
     * @dev Get a random percentage (0-100)
     * @return A random number between 0 and 100
     */
    function getRandomPercentage() public returns (uint64) {
        return getRandomNumber(0, 100);
    }
    
    /**
     * @dev Select a random item from an array
     * @param items Array of items to choose from
     * @return The selected item and its index
     */
    function selectRandomItem(string[] calldata items) public returns (string memory, uint64) {
        if (items.length == 0) {
            revert InvalidRange();
        }
        
        uint64 randomIndex = getRandomNumber(0, uint64(items.length - 1));
        return (items[randomIndex], randomIndex);
    }
    
    /**
     * @dev Get all random values generated by an address
     * @param addr The address to check
     * @return An array of random values
     */
    function getGeneratedValues(address addr) public view returns (uint64[] memory) {
        return generatedValues[addr];
    }
} 